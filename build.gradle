buildscript {
    ext.kotlin_version = '1.3.72'

    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.0-beta04'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        classpath 'com.google.gms:google-services:4.3.3'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.2.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

ext {
    if (System.env.CI == "true") {
        println "I run on Github CI"
        ndkSelectedVersion = "21.3.6528147"
    } else if (System.env.JITPACK == "true") {
        println "I run on JITPACK CI"
        ndkSelectedVersion = "21.1.6352462"
    } else {
        println "I run somewhere"
        ndkSelectedVersion = "21.3.6528147"
    }

    println "ndkSelectedVersion=$ndkSelectedVersion"
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url 'https://jitpack.io' }
        maven {
            url 'https://artifactory.mxtracks.info/artifactory/gradle-dev-local/'

//            def artifactoryPW = project.hasProperty("artifactory_password") ? artifactory_password : System.getenv("ARTIFACTORY_USER_PASSWORD")
//            if (artifactoryPW == null) {
//                out.style(Style.Normal).text("Artifactory has no password eiter you add in gradle.properties ")
//                        .style(Style.Failure).text(" artifactory_password=<your secret>")
//                out.style(Style.Normal).text(" or specify an envirionment variable ")
//                        .style(Style.Failure).text("export ARTIFACTORY_USER_PASSWORD=<your secret>")
//            } else
//                out.style(Style.Normal).text("Artifactory password >${artifactoryPW.take(1)}..<")
//
//            credentials {
//                username = project.hasProperty("artifactory_user") ? project.artifactory_user : System.getenv("ARTIFACTORY_USER_NAME")
//                password = artifactoryPW
//            }
        }
    }
}

static def getGitCommitCount() {
    def process = "git rev-list HEAD --count".execute()
    return process.text.toInteger()
}

static def getTag() {
    def tagVersion = "$System.env.TAG_VERSION"
    if (tagVersion == "null") {
        println "No variable TAG_VERSION specified, I'm using 'git describe --abbrev=0'"
        def process = "git describe --abbrev=0".execute()
        tagVersion = process.text.toString().trim()
    } else {
        def tagVersionToken = tagVersion.split("/")
        tagVersion = tagVersionToken[2]
    }
    return tagVersion
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
